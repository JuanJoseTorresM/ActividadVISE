name: Azure Continuous Delivery JuanAbril

on:
  workflow_dispatch:
    inputs:
      IMAGE_REPOSITORY:
        description: 'Repository of the image (same as declared in App Service creation)'
        required: true
        default: 'api-vise'
      IMAGE_TAG:
        description: 'Tag of the image'
        required: true
        default: 'latest'
      AZURE_WEBAPP_NAME:
        description: 'Nombre del App Service creado en Azure'
        required: true
      PORT:
        description: 'Port of the application'
        required: true
        default: '443'

env:
  IMAGE_URL: ${{ secrets.ACR_NAME_JUAN_ABRIL }}.azurecr.io/${{ github.event.inputs.IMAGE_REPOSITORY }}:${{ github.event.inputs.IMAGE_TAG }}

jobs:
  build_and_push_image:
    name: 'Build and Push to ACR'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Docker Login to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_NAME_JUAN_ABRIL }}.azurecr.io
          username: ${{ secrets.ACR_NAME_JUAN_ABRIL }}
          password: ${{ secrets.ACR_PASSWORD_JUAN_ABRIL }}

      - name: Verify Docker login
        run: docker info

      - name: Build and Push Docker image to ACR
        uses: docker/build-push-action@v6
        with:
          push: true
          tags: ${{ env.IMAGE_URL }}
          file: Dockerfile

      - name: Cleanup local Docker images
        run: docker image prune -af

  deploy:
    name: 'Deploy remote container to Azure App Service'
    runs-on: ubuntu-latest
    needs: build_and_push_image

    steps:
      - name: Deploy container to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ github.event.inputs.AZURE_WEBAPP_NAME }}
          publish-profile: ${{ secrets.AZURE_WEB_APP_PUBLISH_PROFILE_JUAN_ABRIL }}
          images: ${{ env.IMAGE_URL }}

  test_deploy:
    name: 'Test deployed service'
    runs-on: ubuntu-latest
    needs: [build_and_push_image, deploy]

    steps:
      - name: Checkout session.hurl
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            session.hurl
          sparse-checkout-cone-mode: false

      - name: Setup Hurl (API testing tool)
        uses: gacts/install-hurl@v1

      - name: Test deployed API
        continue-on-error: true  # El test no detiene el pipeline si falla
        run: |
          hurl \
            --variable host=https://${{ github.event.inputs.AZURE_WEBAPP_NAME }}.azurewebsites.net:${{ github.event.inputs.PORT }} \
            --connect-timeout 20s \
            --error-format long \
            --verbose \
            --test session.hurl
